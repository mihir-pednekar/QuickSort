# author: Mihir Pednekar
# student id : 19027656

# define C compiler
CC = g++

# define any compile-time flags
CFLAGS = -Wall -o

# define any directories containing header files
#
INCLUDES = -I../include

# define the C source files
SRCS = main.cpp quickSort.cpp

# define the C object files 

OBJS = $(SRCS:.cpp=.o)

# define the executable file 
MAIN = main

all:    $(MAIN)
        @echo  Simple compiler named mycc has been compiled

$(MAIN): $(OBJS) 
        $(CC) $(CFLAGS) $(INCLUDES) -o $(MAIN) $(OBJS)

# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .o file) 
# (see the gnu make manual section about automatic variables)
#.c.o:
#        $(CC) $(CFLAGS) $(INCLUDES) -c $<  -o $@

clean:
        $(RM) *.o *~ $(MAIN)
